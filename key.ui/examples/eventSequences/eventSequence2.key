\javaSource "methodExample/"; // location of class definitions

\programVariables {
  Person p;
  int x;
}

\schemaVariables {
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
    \modalOperator {diamond, diamond_transaction} #diamond;
    \modalOperator {box, box_transaction} #box;
    \program SimpleExpression #se, #se0, #se1, #se2;
    \program MethodName #mn;
    \program [list] SimpleExpression #selist;
}

\rules{
  eventSeq_reduce_true_event {
    \schemaVar \formula phi;
    \schemaVar \formula psi;
    \find(==> \modality{#allmodal}{.. ...}\endmodality (eventSeq(event(TRUE, phi) -> psi)))
    \replacewith(==> \modality{#allmodal}{.. ...}\endmodality (eventSeq(psi) & phi))  //\if(phi) \then(eventSeq(psi)) \else(eventSeq(false -> psi)))
    \heuristics(concrete)
  };

  eventSeq_mc_right {
    \schemaVar \formula phi;
    \schemaVar \formula psi;
    \schemaVar \term Seq mc2;
    \find(\modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (eventSeq(event(mc2, phi) -> psi)))
    \sameUpdateLevel
    \varcond(\equalMethodCalls(#se, #mn, #selist, mc2), \not \staticMethodReference(#se, #mn, #selist), \mayExpandMethod(#se, #mn, #selist))
    "Normal Execution (#se != null)":
        \replacewith(\modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (eventSeq(event(TRUE, phi) -> psi)))
        \add( ==> #se = null);
    "Null Reference (#se = null)":
        \replacewith(\modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (eventSeq(event(FALSE, phi) -> psi)))
        \add(#se = null ==>)
    \heuristics(concrete)//\heuristics(inReachableStateImplication)
  };

  eventSeq_mc_left {
    \schemaVar \formula phi;
    \schemaVar \formula psi;
    \schemaVar \formula post;
    \schemaVar \term Seq mc2;
    \assumes(eventSeq(event(mc2, phi) -> psi) ==>)
    \find(==> \modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (post))
    \sameUpdateLevel
    \varcond(\equalMethodCalls(#se, #mn, #selist, mc2), \not \staticMethodReference(#se, #mn, #selist), \mayExpandMethod(#se, #mn, #selist))
    "Normal Execution (#se != null)":
        \replacewith(eventSeq(event(TRUE, phi) -> psi) ==> \modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (post))
        \add( ==> #se = null);
    "Null Reference (#se = null)":
        \replacewith(eventSeq(event(FALSE, phi) -> psi) ==> \modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (post))
        \add(#se = null ==>)
    \heuristics(concrete)
  };

  eventSeq_mc_last_right {
    \schemaVar \formula phi;
    \schemaVar \term Seq mc2;
    \find(\modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (eventSeq(event(mc2, phi))))
    \sameUpdateLevel
    \varcond(\equalMethodCalls(#se, #mn, #selist, mc2), \not \staticMethodReference(#se, #mn, #selist), \mayExpandMethod(#se, #mn, #selist))
    "Normal Execution (#se != null)":
        \replacewith(\modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (eventSeq(event(TRUE, phi))))
        \add( ==> #se = null);
    "Null Reference (#se = null)":
        \replacewith(\modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (eventSeq(event(FALSE, phi))))
        \add(#se = null ==>)
    \heuristics(concrete)
  };

  eventSeq_mc_last_left {
    \schemaVar \formula phi;
    \schemaVar \term Seq mc2;
    \schemaVar \formula post;
    \assumes(eventSeq(event(mc2, phi)) ==>)
    \find(==> \modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (post))
    \sameUpdateLevel
    \varcond(\equalMethodCalls(#se, #mn, #selist, mc2), \not \staticMethodReference(#se, #mn, #selist), \mayExpandMethod(#se, #mn, #selist))
    "Normal Execution (#se != null)":
        \replacewith(eventSeq(event(TRUE, phi)) ==> \modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (post))
        \add( ==> #se = null);
    "Null Reference (#se = null)":
        \replacewith(eventSeq(event(FALSE, phi)) ==> \modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (post))
        \add(#se = null ==>)
    \heuristics(concrete)
  };

  eventSeq_reduce_last {
    \schemaVar \formula phi;
    \find(eventSeq(event(TRUE, phi)))
    \sameUpdateLevel
    \replacewith(eventSeq(true) & phi)
    \heuristics(concrete)
  };

  eventSeq_reduce_empty {
    \find(eventSeq(true))
    \replacewith(true)
    \heuristics(concrete)
  };

  eventSeq_reduce_nonempty {
    \schemaVar \formula phi;
    \assumes(!phi ==>)
    \find(==> eventSeq(phi))
    \sameUpdateLevel
    \replacewith(==> false)
    \heuristics(simplify)
  };
}

\transformers {
	\formula event(any, \formula);
    \formula eventSeq(\formula);
}

\problem {
          {p.age:=2} // assign initial value to 'age'
            (   x = 0 & p != null
             -> \<{
                    p.birthday();
                    p.grow();
                  }\> (eventSeq(event("p.birthday()", x >= 0) -> event("p.grow()", p = null))))
}