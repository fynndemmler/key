\schemaVariables {
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
    \modalOperator {diamond, diamond_transaction} #diamond;
    \modalOperator {box, box_transaction} #box;
    \program SimpleExpression #se, #se0, #se1, #se2;
    \program MethodName #mn;
    \program SimpleExpression #seMn;
    \program [list] SimpleExpression #selist;
    \program [list] Expression #elist;
}

\rules(events:on, programRules:Java, runtimeExceptions:ban) {
  /*! We want to track that a method-call happened and also assign it an eventNr (see event.key). */
  methodCallToEvent {
       \schemaVar \formula post;
       \schemaVar \term Object rp;
       \schemaVar \term MethodName mn;
       \schemaVar \term Seq params;
       \find(\modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality post)
       \varcond(\not \staticMethodReference(#se, #mn, #selist), \mayExpandMethod(#se, #mn, #selist), \getObject(rp, #se), \getMethodName(mn, #se, #mn, #selist), \getParams(params, #selist))
       "Normal Execution (#se != null)":
           \replacewith({\eventUpdate(event(rp, mn, params), eventNr)}{eventNr:=eventNr+1}\modality{#allmodal}{.. #method-call(#se.#mn(#selist)); ...}\endmodality (post))
           \add( ==> #se = null);
       "Null Reference (#se = null)":
           \replacewith(\modality{#allmodal}{.. throw new java.lang.NullPointerException();
                   ...}\endmodality (post))
           \add(#se = null ==>)
       \heuristics(method_expand)
  };

  /*! Removes an event update that is applied on a formula that does not contain an event. */
  removeUnnecessaryEventUpdate {
    \schemaVar \update u;
    \schemaVar \formula phi;
    \find({u}phi)
    \varcond(\isEventUpdate(u), \not \containsEvent(phi))
    \replacewith(phi)
    \heuristics(update_elim)
  };
}
