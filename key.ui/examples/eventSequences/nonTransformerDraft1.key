\javaSource "methodExample/"; // location of class definitions

\sorts{
    Event;
}

\programVariables {
  Person p;
  int x;
}

\predicates {
}

\functions{
    \unique Event event(Object, MethodName, Seq);
    \unique Pair condEvent(Event, boolean);
}

\schemaVariables {
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
    \modalOperator {diamond, diamond_transaction} #diamond;
    \modalOperator {box, box_transaction} #box;
    \program SimpleExpression #se, #se0, #se1, #se2;
    \program MethodName #mn;
    \program SimpleExpression #seMn;
    \program [list] SimpleExpression #selist;
}

\rules(programRules:Java, runtimeExceptions:ban) {
  newEvent_mc {
      \schemaVar \formula post;
      \find(\modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality post)
      \varcond(\not \staticMethodReference(#se, #mn, #selist), \mayExpandMethod(#se, #mn, #selist))
      "Normal Execution (#se != null)":
          \replacewith({\eventUpdate(event(#se, #mn, #selist))}\modality{#allmodal}{.. #method-call(#se.#mn(#selist)); ...}\endmodality (post))
          \add( ==> #se = null);
      "Null Reference (#se = null)":
          \replacewith(\modality{#allmodal}{.. throw new java.lang.NullPointerException();
                  ...}\endmodality (post))
          \add(#se = null ==>)
      \heuristics(update_apply)
  };
}

\transformers {
  //  \formula eventSeq(\formula);
}

\problem {
          {p.age:=2} // assign initial value to 'age'
            (   x = 0 & p != null
             -> \<{
                    p.birthday();
                    p.grow();
                  }\> (p.age > x))
}