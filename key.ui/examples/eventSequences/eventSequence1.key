
\javaSource "methodExample/"; // location of class definitions

\programVariables {
  Person p;
  int x;
}

\schemaVariables {
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
    \modalOperator {diamond, diamond_transaction} #diamond;
    \modalOperator {box, box_transaction} #box;
    \program SimpleExpression #se, #se0, #se1, #se2;
    \program MethodName #mn;
    \program [list] SimpleExpression #selist;
}

\rules{
  event_reduce_true {
    \schemaVar \formula phi;
    \find(==> event(TRUE, phi))
    \replacewith(==> phi)
    \heuristics(simplify)
  };

  event_reduce_false {
    \schemaVar \formula phi;
    \find(==> event(FALSE, phi))
    \replacewith(==> false)
    \heuristics(simplify)
  };

  event_mc {
    \schemaVar \formula phi;
    \schemaVar \term Seq mc2;
    \find(\modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality event(mc2, phi))
    \sameUpdateLevel
    \varcond(\equalMethodCalls(#se, #mn, #selist, mc2), \not \staticMethodReference(#se, #mn, #selist), \mayExpandMethod(#se, #mn, #selist))
    "Normal Execution (#se != null)":
        \replacewith(\modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (event(TRUE, phi)))
        \add( ==> #se = null);
    "Null Reference (#se = null)":
        \replacewith(\modality{#allmodal}{.. #se.#mn(#selist); ...}\endmodality (event(FALSE, phi)))
        \add(#se = null ==>)
    \heuristics(simplify)
   };

  eventSeq_reduce_event {
    \schemaVar \formula phi;
    \schemaVar \formula psi;
    \find(eventSeq(event(TRUE, phi) -> psi))
    \sameUpdateLevel
    \replacewith(eventSeq(psi))
    \add(==> event(TRUE, phi))
    //\heuristics(simplify)
  };

  eventSeq_reduce_last {
    \schemaVar \formula phi;
    \find(eventSeq(event(TRUE, phi)))
    \sameUpdateLevel
    \replacewith(eventSeq(true))
    \add(==> event(TRUE, phi))
  };

  eventSeq_reduce_empty {
    \find(eventSeq(true))
    \replacewith(true)
  };

  eventSeq_reduce_nonempty {
    \schemaVar \formula phi;
    \find(eventSeq(phi))
    \replacewith(false)
  };

}

\transformers {
	\formula event(any, \formula);
    \formula eventSeq(\formula);
}

\problem {
          {p.age:=2} // assign initial value to 'age'
            (   x = 0 & p != null
             -> \<{
                    p.birthday();
                  }\> (eventSeq(event("p.birthday()", x < 0) -> event("p.birthday()", p != null))))
}

/*
\problem {
          {p.age:=2} // assign initial value to 'age'
            (   x = 0 & p != null
             -> \<{
                    p.birthday();
                  }\> (event("p.birthday()", x < 0)))
}
*/

//
// event(\event[birthday(), TRUE], x >= 0)
//    \schemaVar \term boolean mc;
//     \schemaVar \skolemTerm any sk;
//     \varcond(\newDependingOn(sk, mc))
//  reduce_event {
 //   \schemaVar \term boolean mc;
 //   \schemaVar \formula phi;
 //   \find(==> event(mc, phi))
  //  \replacewith(==> \if (mc = TRUE & phi) \then (true) \else (event(mc, phi)))
 //   \heuristics(simplify)
 // };
 // actual post con: p.age > x &

 // event("birthday", x >= 0)) &